//CHESSBOARD
function chessboard(n) {
   let  chessboard = ''; 
   for (let i = 0; i < n; i++) {
     for (let j = 0; j < n; j++) {
      if ((i+j)%2 === 0) {
        chessboard += ' '; 
      }
      else{
        chessboard += '#'
      }
    }
    chessboard += '\n'
  }
  return chessboard;
}
// console.log(chessboard(4));

/*Consider this puzzle: by starting from the number 1 and repeatedly either adding 5 or multiplying by 3, an infinite set of numbers can be produced. How would you write 
a function that, given a number, tries to find a sequence of such additions and multiplications that produces that number?
For example, the number 13 could be reached by first multiplying by 3 and then adding 5 twice, whereas the number 15 
cannot be reached at all.

Here is a recursive solution:*/ 

function findSolution(target) {
    function find(current, history) {
      if (current == target) {
        return history;
      } else if (current > target) {
        return null;
      } else {
        return find(current + 5, `(${history} + 5)`) ||
               find(current * 3, `(${history} * 3)`);
      }
    }
    return find(1, "1");
  }
  
  console.log(findSolution(24));
  // → (((1 * 3) + 5) * 3)


function isEven(n){
    n = Math.abs(n); 
    if (n===0){
      return true; 
    }
    else if (n===1){
      return false; 
    }
    return isEven(n-2);
  }
  
  console.log(isEven(50));
  // → true
  console.log(isEven(75));
  // → false
  console.log(isEven(-1));
  // → ??